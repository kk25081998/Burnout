Logic:
In order to avoid the assumption that all managers already exist in the database, you would first import all the users, without setting the manager_id. 
Then, you can run a second query to update the manager_id field, once all the users are present in the database. This requires a two-pass solution.

Python script:

import pandas as pd
from werkzeug.security import generate_password_hash

df = pd.read_excel("onboarding.xlsx")

with open("import.sql", "w") as file:
    for index, row in df.iterrows():
        email = row['Email']
        firstname = row['First Name']
        lastname = row['Last Name']
        date_of_birth = row['Date of Birth']
        company_id = row['Company ID']

        password = generate_password_hash(f"{firstname}{date_of_birth.year}")  # Hash this password
        sql = f"INSERT INTO user (email, password_hash, firstname, lastname, date_of_birth, company_id) VALUES ('{email}', '{password}', '{firstname}', '{lastname}', '{date_of_birth}', '{company_id}');\n"
        file.write(sql)

    # Second pass to update the manager_id field for each user
    for index, row in df.iterrows():
        email = row['Email']
        manager_email = row['Manager Email']
        sql = f"UPDATE user SET manager_id = (SELECT id FROM user WHERE email = '{manager_email}') WHERE email = '{email}';\n"
        file.write(sql)

Excel format:
Based on your User model, your Excel spreadsheet could have the following columns:

1. **Email**: The unique email address of the user.
2. **First Name**: The first name of the user.
3. **Last Name**: The last name of the user.
4. **Date of Birth**: The birth date of the user.
5. **Company ID**: The ID of the company to which the user belongs.
6. **Manager Email**: The email address of the user's manager.

Here's an example of what the data might look like:

| Email                | First Name | Last Name | Date of Birth | Company ID | Manager Email        |
|----------------------|------------|-----------|---------------|------------|----------------------|
| john.doe@example.com | John       | Doe       | 1980-01-01    | 1          | jane.manager@example.com |
| jane.manager@example.com | Jane       | Manager   | 1975-01-01    | 1          |                      |
| ...                  | ...        | ...       | ...           | ...        | ...                  |

Note that for the CEO or other top-level users who do not have a manager, the "Manager Email" field can be left blank.

The Date of Birth field should be in a format that your database can understand, typically "YYYY-MM-DD". 
Also, keep in mind that the Company ID should match the ID in your Company table in your database. 
You would need to make sure these companies have been created prior to running the SQL script.